1. (Single Responsibility Principle - SRP):
Knight класс имеет только одну ответственность - управление выполнением задания рыцаря. Он не занимается непосредственно реализацией заданий. Все верно

2. (Open/Closed Principle - OCP):
Классы Implementation_1 и Implementation_2 предоставляют реализации интерфейса Quest. Можно добавить новые реализации без изменения существующего кода, что соответствует верно

3. (Liskov Substitution Principle - LSP):
Нет явных нарушений принципа LSP, так как все реализации Quest должны предоставлять метод embark(). Однако, реализации могут содержать различное поведение и это может потенциально
нарушать контракт интерфейса

4. Interface Segregation Principle - ISP):
В коде присутствует всего один интерфейс Quest. Это не нарушает ISP, так как нет избыточных методов в интерфейсе. Все верно

5. (Dependency Inversion Principle - DIP):
Класс Knight инвертирует зависимость от интерфейса Quest, а не от конкретных реализаций. Это соответствует DIP. Все верно

Код отвечает принципам SOLID. Он использует инверсию управления для внедрения зависимостей и имеет разделение обязанностей между классами.
Для улучшения кода можно обратить внимание на возможное нарушение Liskov Substitution Principle, так как разные реализации Quest могут иметь разное поведение